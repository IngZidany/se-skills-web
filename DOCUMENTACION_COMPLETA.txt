================================================================================
                    DOCUMENTACIÓN COMPLETA DEL PROYECTO
                    KNOWLEDGE - PLATAFORMA WEB TECNOLÓGICA
================================================================================

ÍNDICE
================================================================================
1. DESCRIPCIÓN DEL PROYECTO
2. PRERREQUISITOS DEL SISTEMA
3. INSTALACIÓN Y CONFIGURACIÓN
4. ESTRUCTURA DEL PROYECTO
5. DESARROLLO LOCAL
6. CONSTRUCCIÓN PARA PRODUCCIÓN
7. DESPLIEGUE EN GOOGLE CLOUD PLATFORM
8. TROUBLESHOOTING
9. MANTENIMIENTO Y MONITOREO
10. ARCHIVOS DE CONFIGURACIÓN

================================================================================
1. DESCRIPCIÓN DEL PROYECTO
================================================================================

PROYECTO: Knowledge - Plataforma Web Tecnológica
TECNOLOGÍAS: Astro, Tailwind CSS v4, Node.js, JavaScript
OBJETIVO: Plataforma educativa para el desarrollo de habilidades tecnológicas

CARACTERÍSTICAS PRINCIPALES:
- Página de inicio con sección hero "KNOWLEDGE"
- 4 páginas de habilidades: Pensamiento Crítico, Comunicación, Creatividad, Colaboración
- Navegación principal y secundaria responsive
- Diseño adaptable a móviles, tablets y desktop
- 4 secciones por página: Knowledge, Biblioteca, Progreso, Próximos Pasos
- Optimización para pantallas 1440x900 con escalado responsive

================================================================================
2. PRERREQUISITOS DEL SISTEMA
================================================================================

SOFTWARE REQUERIDO:
- Node.js 18 o superior
- npm (incluido con Node.js)
- Git (para control de versiones)
- Editor de código (VS Code recomendado)

CUENTAS NECESARIAS:
- Cuenta de Google Cloud Platform (para despliegue)
- Cuenta de GitHub/GitLab (opcional, para CI/CD)

HERRAMIENTAS OPCIONALES:
- Docker Desktop (para pruebas locales)
- Google Cloud SDK (para despliegue)

VERIFICACIÓN DE PRERREQUISITOS:
```bash
# Verificar Node.js
node --version  # Debe ser 18.x o superior

# Verificar npm
npm --version   # Debe ser 8.x o superior

# Verificar Git
git --version   # Cualquier versión reciente

# Verificar Docker (opcional)
docker --version
```

================================================================================
3. INSTALACIÓN Y CONFIGURACIÓN
================================================================================

PASO 1: CLONAR EL REPOSITORIO
```bash
# Clonar el repositorio
git clone <URL_DEL_REPOSITORIO>
cd Web_Skills
```

PASO 2: INSTALAR DEPENDENCIAS
```bash
# Instalar todas las dependencias
npm install

# Verificar instalación
npm list --depth=0
```

PASO 3: CONFIGURAR VARIABLES DE ENTORNO (OPCIONAL)
```bash
# Crear archivo .env (opcional)
cp .env.example .env
# Editar .env con tus configuraciones
```

PASO 4: VERIFICAR CONFIGURACIÓN
```bash
# Verificar que Astro esté configurado correctamente
npm run astro -- --version

# Verificar configuración de Tailwind
npx tailwindcss --help
```

================================================================================
4. ESTRUCTURA DEL PROYECTO
================================================================================

ESTRUCTURA DE DIRECTORIOS:
```
Web_Skills/
├── src/
│   ├── components/
│   │   ├── Navigation.astro      # Navegación principal
│   │   └── SecondaryNav.astro    # Navegación secundaria
│   ├── layouts/
│   │   └── Layout.astro          # Layout principal
│   ├── pages/
│   │   ├── index.astro           # Página de inicio
│   │   ├── pensamiento-critico.astro
│   │   ├── comunicacion.astro
│   │   ├── creatividad.astro
│   │   └── colaboracion.astro
│   └── styles/
│       └── global.css            # Estilos globales
├── public/
│   └── favicon.svg               # Icono del sitio
├── astro.config.mjs              # Configuración de Astro
├── tailwind.config.js            # Configuración de Tailwind
├── package.json                  # Dependencias y scripts
├── Dockerfile                    # Configuración Docker
├── nginx.conf                    # Configuración nginx
├── cloudbuild.yaml               # Configuración Cloud Build
├── deploy.sh                     # Script de despliegue
└── DEPLOYMENT.md                 # Documentación de despliegue
```

ARCHIVOS DE CONFIGURACIÓN PRINCIPALES:

1. astro.config.mjs:
   - Configuración de Astro
   - Integración con Tailwind CSS
   - Configuración de Vite

2. tailwind.config.js:
   - Configuración de Tailwind CSS v4
   - Definición de fuentes personalizadas
   - Rutas de contenido

3. src/styles/global.css:
   - Importación de Tailwind CSS
   - Estilos personalizados
   - Clases de utilidad

4. src/layouts/Layout.astro:
   - Layout HTML base
   - Meta tags
   - Importación de fuentes y estilos

================================================================================
5. DESARROLLO LOCAL
================================================================================

INICIAR SERVIDOR DE DESARROLLO:
```bash
# Iniciar servidor de desarrollo
npm run dev

# El servidor estará disponible en:
# http://localhost:4321
```

COMANDOS DE DESARROLLO:
```bash
# Servidor de desarrollo
npm run dev

# Construir para producción
npm run build

# Vista previa de la build
npm run preview

# Comando de Astro
npm run astro
```

CARACTERÍSTICAS DEL SERVIDOR DE DESARROLLO:
- Hot reload automático
- Recarga automática al cambiar archivos
- Errores en tiempo real
- Optimización automática

NAVEGACIÓN EN DESARROLLO:
- Página principal: http://localhost:4321/
- Pensamiento Crítico: http://localhost:4321/pensamiento-critico
- Comunicación: http://localhost:4321/comunicacion
- Creatividad: http://localhost:4321/creatividad
- Colaboración: http://localhost:4321/colaboracion

================================================================================
6. CONSTRUCCIÓN PARA PRODUCCIÓN
================================================================================

CONSTRUIR LA APLICACIÓN:
```bash
# Construir para producción
npm run build

# Verificar archivos generados
ls dist/
```

ARCHIVOS GENERADOS:
- dist/: Directorio con archivos optimizados
- Archivos HTML estáticos
- CSS optimizado y minificado
- JavaScript optimizado
- Assets optimizados

VISTA PREVIA DE PRODUCCIÓN:
```bash
# Vista previa de la build de producción
npm run preview

# Servidor de vista previa en:
# http://localhost:4321
```

OPTIMIZACIONES APLICADAS:
- Minificación de CSS y JavaScript
- Optimización de imágenes
- Compresión de archivos
- Eliminación de código no utilizado

================================================================================
7. DESPLIEGUE EN GOOGLE CLOUD PLATFORM
================================================================================

PRERREQUISITOS PARA GCP:
1. Cuenta de Google Cloud Platform
2. Google Cloud SDK instalado
3. Proyecto GCP creado
4. APIs habilitadas

CONFIGURACIÓN INICIAL DE GCP:
```bash
# Instalar Google Cloud SDK
# https://cloud.google.com/sdk/docs/install

# Autenticarse
gcloud auth login

# Configurar proyecto
gcloud config set project TU_PROJECT_ID

# Habilitar APIs necesarias
gcloud services enable cloudbuild.googleapis.com
gcloud services enable run.googleapis.com
gcloud services enable containerregistry.googleapis.com
```

MÉTODO 1: DESPLIEGUE AUTOMÁTICO (RECOMENDADO)

1. Conectar repositorio a Cloud Build:
   - Ir a Cloud Build Triggers en GCP Console
   - Conectar repositorio de GitHub/GitLab
   - Configurar trigger con archivo cloudbuild.yaml

2. Configurar trigger:
   - Branch: main o master
   - Archivo: cloudbuild.yaml
   - Región: us-central1

3. Despliegue automático:
   - Cada push activará el despliegue
   - Proceso completamente automatizado

MÉTODO 2: DESPLIEGUE MANUAL

Usando script de despliegue:
```bash
# Despliegue básico
./deploy.sh TU_PROJECT_ID

# Despliegue con región específica
./deploy.sh TU_PROJECT_ID us-west1
```

Usando comandos manuales:
```bash
# 1. Construir y subir imagen
gcloud builds submit --tag gcr.io/TU_PROJECT_ID/web-skills .

# 2. Desplegar en Cloud Run
gcloud run deploy web-skills \
  --image gcr.io/TU_PROJECT_ID/web-skills \
  --platform managed \
  --region us-central1 \
  --allow-unauthenticated \
  --port 80 \
  --memory 512Mi \
  --cpu 1 \
  --max-instances 10
```

MÉTODO 3: PRUEBA LOCAL CON DOCKER
```bash
# Construir imagen localmente
docker build -t web-skills .

# Ejecutar contenedor
docker run -p 8080:80 web-skills

# Acceder a http://localhost:8080
```

CONFIGURACIÓN DE DOCKER:
- Dockerfile: Configuración multi-etapa
- nginx.conf: Configuración del servidor web
- .dockerignore: Archivos excluidos del build

================================================================================
8. TROUBLESHOOTING
================================================================================

PROBLEMAS COMUNES Y SOLUCIONES:

1. ERROR: "Cannot apply unknown utility class"
   CAUSA: Configuración incorrecta de Tailwind CSS v4
   SOLUCIÓN: Verificar archivo global.css y tailwind.config.js

2. ERROR: "Port already in use"
   CAUSA: Puerto 4321 ocupado
   SOLUCIÓN: 
   ```bash
   # Encontrar proceso
   netstat -ano | findstr :4321
   # Terminar proceso
   taskkill /PID <PID> /F
   ```

3. ERROR: "Permission denied" en GCP
   CAUSA: Permisos insuficientes
   SOLUCIÓN:
   ```bash
   # Verificar autenticación
   gcloud auth list
   # Verificar proyecto
   gcloud config get-value project
   ```

4. ERROR: "API not enabled"
   CAUSA: APIs de GCP no habilitadas
   SOLUCIÓN:
   ```bash
   gcloud services enable cloudbuild.googleapis.com
   gcloud services enable run.googleapis.com
   gcloud services enable containerregistry.googleapis.com
   ```

5. ERROR: "Build failed"
   CAUSA: Error en construcción de Docker
   SOLUCIÓN:
   ```bash
   # Ver logs de construcción
   gcloud builds log [BUILD_ID]
   # Verificar Dockerfile
   docker build --no-cache -t test .
   ```

6. ERROR: "Styles not loading"
   CAUSA: CSS no se está aplicando
   SOLUCIÓN:
   - Verificar importación en Layout.astro
   - Verificar configuración de Tailwind
   - Limpiar caché del navegador

VERIFICACIONES DE DIAGNÓSTICO:
```bash
# Verificar instalación de dependencias
npm list --depth=0

# Verificar configuración de Astro
npm run astro -- --version

# Verificar configuración de Tailwind
npx tailwindcss --help

# Verificar puertos en uso
netstat -an | findstr :4321

# Verificar logs del servidor
# Revisar consola del navegador para errores
```

================================================================================
9. MANTENIMIENTO Y MONITOREO
================================================================================

MONITOREO EN GCP:

1. Ver logs en tiempo real:
```bash
gcloud logs tail --service=web-skills
```

2. Ver métricas del servicio:
- Ir a Cloud Run en GCP Console
- Revisar métricas de rendimiento
- Configurar alertas

3. Escalar el servicio:
```bash
gcloud run services update web-skills \
  --max-instances 20 \
  --memory 1Gi
```

MANTENIMIENTO RUTINARIO:

1. Actualizar dependencias:
```bash
# Verificar dependencias desactualizadas
npm outdated

# Actualizar dependencias
npm update

# Actualizar dependencias principales
npm install package@latest
```

2. Limpiar caché:
```bash
# Limpiar caché de npm
npm cache clean --force

# Limpiar caché de Astro
rm -rf .astro/
```

3. Verificar rendimiento:
```bash
# Construir y verificar tamaño
npm run build
du -sh dist/

# Verificar optimizaciones
npm run preview
```

BACKUP Y RECUPERACIÓN:

1. Backup del código:
```bash
# Crear backup del repositorio
git archive --format=zip --output=backup-$(date +%Y%m%d).zip HEAD
```

2. Backup de configuración:
```bash
# Exportar configuración de GCP
gcloud config list --format="export" > gcp-config.sh
```

================================================================================
10. ARCHIVOS DE CONFIGURACIÓN
================================================================================

DESCRIPCIÓN DE ARCHIVOS PRINCIPALES:

1. package.json:
   - Dependencias del proyecto
   - Scripts de desarrollo y producción
   - Metadatos del proyecto

2. astro.config.mjs:
   - Configuración de Astro
   - Integración con Tailwind CSS
   - Configuración de Vite

3. tailwind.config.js:
   - Configuración de Tailwind CSS v4
   - Definición de fuentes
   - Rutas de contenido

4. src/styles/global.css:
   - Importación de Tailwind CSS
   - Estilos personalizados
   - Clases de utilidad

5. Dockerfile:
   - Configuración multi-etapa
   - Construcción optimizada
   - Configuración de nginx

6. nginx.conf:
   - Configuración del servidor web
   - Compresión y caché
   - Headers de seguridad

7. cloudbuild.yaml:
   - Configuración de CI/CD
   - Automatización de despliegue
   - Configuración de Cloud Run

8. deploy.sh:
   - Script de despliegue manual
   - Verificación de prerrequisitos
   - Automatización de procesos

9. .dockerignore:
   - Archivos excluidos del build
   - Optimización del contexto
   - Reducción del tamaño de imagen

10. DEPLOYMENT.md:
    - Documentación de despliegue
    - Guías paso a paso
    - Troubleshooting detallado

================================================================================
COSTOS ESTIMADOS EN GCP
================================================================================

CONFIGURACIÓN ACTUAL:
- Cloud Run: ~$5-15/mes (dependiendo del tráfico)
- Container Registry: ~$1-5/mes
- Cloud Build: ~$1-3/mes
- TOTAL ESTIMADO: ~$7-23/mes

FACTORES QUE AFECTAN EL COSTO:
- Tráfico de la aplicación
- Tiempo de ejecución de Cloud Run
- Almacenamiento de imágenes
- Número de builds

OPTIMIZACIONES DE COSTO:
- Configurar escalado automático
- Optimizar tamaño de imagen Docker
- Usar caché en Cloud Build
- Monitorear uso de recursos

================================================================================
CONTACTO Y SOPORTE
================================================================================

RECURSOS ÚTILES:
- Documentación de Astro: https://docs.astro.build/
- Documentación de Tailwind CSS: https://tailwindcss.com/docs
- Documentación de Cloud Run: https://cloud.google.com/run/docs
- Documentación de Cloud Build: https://cloud.google.com/build/docs

COMUNIDAD:
- Discord de Astro: https://astro.build/chat
- Stack Overflow: https://stackoverflow.com/questions/tagged/astro
- GitHub Issues: Para reportar bugs

================================================================================
VERSIÓN DE LA DOCUMENTACIÓN: 1.0
FECHA DE ÚLTIMA ACTUALIZACIÓN: $(date)
AUTOR: Asistente de Desarrollo
================================================================================ 